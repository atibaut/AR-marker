// NyARMarkersBehavior.java// Andrew Davison, ad@fivedots.coe.psu.ac.th, April 2010/* A time-based triggered behaviour which uses a detector to update the position of model drawn above markers. */import java.util.Enumeration;import javax.media.Buffer;import javax.media.j3d.Background;import javax.media.j3d.Behavior;import javax.media.j3d.BoundingSphere;import javax.media.j3d.WakeupCondition;import javax.media.j3d.WakeupOnElapsedTime;import javax.vecmath.Point3d;import jp.nyatla.nyartoolkit.NyARException;import jp.nyatla.nyartoolkit.core.param.NyARParam;import jp.nyatla.nyartoolkit.core.types.NyARIntSize;import jp.nyatla.nyartoolkit.java3d.utils.J3dNyARRaster_RGB;import jp.nyatla.nyartoolkit.jmf.utils.JmfCaptureDevice;import jp.nyatla.nyartoolkit.jmf.utils.JmfCaptureDeviceList;import jp.nyatla.nyartoolkit.jmf.utils.JmfCaptureListener;public class NyARMarkersBehavior extends Behavior implements JmfCaptureListener {	private final double FPS = 30.0; // so executes about 30 times/sec	private Background bg = null;	private DetectMarkers detectMarkers; // the detector for the markers	private WakeupCondition wakeup;	private JmfCaptureDevice captureDev; // captures the camera image	private J3dNyARRaster_RGB rasterRGB; // the camera image	public NyARMarkersBehavior(NyARParam params, Background bg, DetectMarkers ms) {		super();		this.bg = bg;		detectMarkers = ms;		wakeup = new WakeupOnElapsedTime((int) (1000.0 / FPS));		setSchedulingBounds(new BoundingSphere(new Point3d(), 100.0));		/*		 * try { quicktime.QTSession.open(); } catch (quicktime.QTException qte)		 * { qte.printStackTrace(); }		 */		initCaptureDevice(params);	} // end of NyARMarkersBehavior()	private void initCaptureDevice(NyARParam params) {		NyARIntSize screenSize = params.getScreenSize();		try {			JmfCaptureDeviceList devlist = new JmfCaptureDeviceList(); // get																		// devices			captureDev = devlist.getDevice(0); // use the first			captureDev.setCaptureFormat(screenSize.w, screenSize.h, 15.0f);			captureDev.setOnCapture(this);			rasterRGB = new J3dNyARRaster_RGB(params,					captureDev.getCaptureFormat()); // create raster			detectMarkers.createDetector(params, rasterRGB); // initialise																// detector			captureDev.start();		} catch (NyARException e) {			System.out.println(e);			System.exit(1);		}	} // end of initCaptureDevice()	public void initialize() {		wakeupOn(wakeup);	}	public void processStimulus(Enumeration criteria)	/* use the detector to update the models on the markers */	{		try {			synchronized (rasterRGB) {				if (bg != null) {					rasterRGB.renewImageComponent2D();					bg.setImage(rasterRGB.getImageComponent2D()); // refresh																	// background				}			}			detectMarkers.updateModels(rasterRGB);			wakeupOn(wakeup);		} catch (Exception e) {			e.printStackTrace();		}	} // end of processStimulus()	public void onUpdateBuffer(Buffer buf)	// triggered by JmfCaptureListener event	{		try {			synchronized (rasterRGB) {				rasterRGB.setBuffer(buf);			}		} catch (Exception e) {			e.printStackTrace();		}	} // end of onUpdateBuffer()	/*	 * public void stop() { captureDev.stop(); }	 */} // end of NyARMarkersBehavior class